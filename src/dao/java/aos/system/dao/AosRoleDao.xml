<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- aos_role[aos_role]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-04-29 00:23:57 -->
<mapper namespace="aos.system.dao.AosRoleDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="AosRolePO">
		INSERT INTO aos_role (
		<if test="rolename != null and rolename != ''">
	         rolename, <!-- rolename -->
		</if>
		<if test="description != null and description != ''">
	         description, <!-- description -->
		</if>
	          id
		)VALUES(
		<if test="rolename != null and rolename != ''">
	          #{rolename, jdbcType=VARCHAR}, <!-- rolename -->
	    </if>
		<if test="description != null and description != ''">
	          #{description, jdbcType=VARCHAR}, <!-- description -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id" parameterType="AosRolePO">
		INSERT INTO aos_role (
		    <include refid="column" />
		)
		VALUES (
		    #{id, jdbcType=INTEGER},  <!-- id -->
		    #{rolename, jdbcType=VARCHAR},  <!-- rolename -->
		    #{description, jdbcType=VARCHAR}  <!-- description -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="AosRolePO">
		UPDATE aos_role
		<set>
			<if test="id != null">
		          id = #{id, jdbcType=INTEGER},  <!-- id -->
			</if>
			<if test="rolename != null">
		          rolename = #{rolename, jdbcType=VARCHAR},  <!-- rolename -->
			</if>
			<if test="description != null">
		          description = #{description, jdbcType=VARCHAR},  <!-- description -->
			</if>
		</set>
		WHERE  id = #{id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM aos_role WHERE  id = #{id}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="AosRolePO">
		SELECT
		<include refid="column" />
		FROM aos_role WHERE  id = #{id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="AosRolePO">
		SELECT
		    <include refid="column" />
		FROM aos_role
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="AosRolePO">
		SELECT
			<include refid="column" />	
		FROM aos_role
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="AosRolePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM aos_role
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="AosRolePO">
		SELECT
			<include refid="column" />	
		FROM aos_role
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="AosRolePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM aos_role
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM aos_role
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM aos_role
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id,  <!-- id -->
		  rolename,  <!-- rolename -->
		  description  <!-- description -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  aos_role.id,  <!-- id -->
		  aos_role.rolename,  <!-- rolename -->
		  aos_role.description  <!-- description -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id != null ">
		      AND id = #{id}  <!-- id -->
		</if>
	    <if test="rolename != null and rolename != ''">
		      AND rolename = #{rolename}  <!-- rolename -->
		</if>
	    <if test="description != null and description != ''">
		      AND description = #{description}  <!-- description -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="rolename != null and rolename != ''">
		      AND rolename like '${rolename}%'  <!-- rolename -->
		</if>
	    <if test="description != null and description != ''">
		      AND description like '${description}%'  <!-- description -->
		</if>
	</sql>
	
</mapper>