package ${package};

import java.util.List;
#if(${importDto.bigDecimal})
import java.math.BigDecimal;
#end
#if(${importDto.bigInteger})
import java.math.BigInteger;
#end
import org.apache.ibatis.annotations.Param;

import aos.framework.core.annotation.Dao;
import aos.framework.core.typewrap.Dto;
import ${package_base}.po.${tableDto.upname}PO;

/**
 * <b>$!{tableDto.comment}[${tableDto.name}]数据访问接口</b>
 * 
 * <p>
 * 注意:此文件由AOS平台自动生成-禁止手工修改
 * </p>
 * 
 * @author $!author
 * @date $!sysdate
 */
@Dao("${tableDto.lowname}Dao")
public interface ${tableDto.upname}Dao {

	/**
	 * 插入一个数据持久化对象(插入字段为传入PO实体的非空属性)
	 * <p> 防止DB字段缺省值需要程序中再次赋值
	 *
	 * @param ${tableDto.name}PO
	 *            要插入的数据持久化对象
	 * @return 返回影响行数
	 */
	int insert(${tableDto.upname}PO ${tableDto.lowname}PO);
	
	/**
	 * 插入一个数据持久化对象(含所有字段)
	 * 
	 * @param ${tableDto.name}PO
	 *            要插入的数据持久化对象
	 * @return 返回影响行数
	 */
	int insertAll(${tableDto.upname}PO ${tableDto.lowname}PO);

	/**
	 * 根据主键修改数据持久化对象
	 * 
	 * @param ${tableDto.name}PO
	 *            要修改的数据持久化对象
	 * @return int 返回影响行数
	 */
	int updateByKey(${tableDto.upname}PO ${tableDto.lowname}PO);

	/**
	 * 根据主键查询并返回数据持久化对象
	 * 
	 * @return ${tableDto.upname}PO
	 */
	${tableDto.upname}PO selectByKey(${bykey});

	/**
	 * 根据唯一组合条件查询并返回数据持久化对象
	 * 
	 * @return ${tableDto.upname}PO
	 */
	${tableDto.upname}PO selectOne(Dto pDto);

	/**
	 * 根据Dto查询并返回数据持久化对象集合
	 * 
	 * @return List<${tableDto.upname}PO>
	 */
	List<${tableDto.upname}PO> list(Dto pDto);

	/**
	 * 根据Dto查询并返回分页数据持久化对象集合
	 * 
	 * @return List<${tableDto.upname}PO>
	 */
	List<${tableDto.upname}PO> listPage(Dto pDto);
		
	/**
	 * 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)
	 * 
	 * @return List<${tableDto.upname}PO>
	 */
	List<${tableDto.upname}PO> like(Dto pDto);

	/**
	 * 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配)
	 * 
	 * @return List<${tableDto.upname}PO>
	 */
	List<${tableDto.upname}PO> likePage(Dto pDto);

	/**
	 * 根据主键删除数据持久化对象
	 *
	 * @return 影响行数
	 */
	int deleteByKey(${bykey});
	
	/**
	 * 根据Dto统计行数
	 * 
	 * @param pDto
	 * @return
	 */
	int rows(Dto pDto);
	
	/**
	 * 根据数学表达式进行数学运算
	 * 
	 * @param pDto
	 * @return String
	 */
	String calc(Dto pDto);
	
}
